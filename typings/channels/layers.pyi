import re
import typing as t

from channels import DEFAULT_CHANNEL_LAYER

Message = dict[t.Any, t.Any]

ChannelPattern = str | re.Pattern

class BaseChannelLayer:
    channel_name_regex: re.Pattern
    group_name_regex: re.Pattern
    invalid_name_error: str
    def __init__(
        self,
        expiry: int = 60,
        capacity: int = 100,
        channel_capacity: None | int = None,
    ): ...
    def compile_capacities(
        self,
        channel_capacity: dict[ChannelPattern, int],
    ) -> list[tuple[re.Pattern, int]]: ...
    def get_capacity(self, channel: str) -> int: ...
    def match_type_and_length(self, name: str) -> bool: ...
    def valid_channel_name(self, name: str, receive: bool = False) -> bool: ...
    def valid_group_name(self, name: str) -> bool: ...
    def valid_channels_name(
        self, names: list[str], receive: bool = False
    ) -> bool: ...
    def non_local_name(self, name: str) -> str: ...
    async def send(self, channel: str, message: Message) -> None: ...
    async def receive(self, channel: str) -> Message: ...
    async def new_channel(self, prefix: str = "") -> str: ...
    async def flush(self) -> None: ...
    async def close(self) -> None: ...
    async def group_add(self, group: str, channel: str) -> None: ...
    async def group_discard(self, group: str, channel: str) -> None: ...
    async def group_send(self, group: str, message: Message) -> None: ...

def get_channel_layer(
    alias: str = DEFAULT_CHANNEL_LAYER,
) -> BaseChannelLayer: ...
